                Design    

module peres(p,q,r,a,b,c);
output p,q,r;
input a,b,c;
wire w1,w2;
//gate level modeling
not t1(w1,a);
not t2(p,w1);
xor t3(q,a,b);
and t4(w2,a,b);
xor t5(r,w2,c);
endmodule
 
               Testbench 

module peres_tb();
wire p,q,r;
reg a,b,c;
peres uut(p,q,r,a,b,c);
initial begin
a=0;b=0;c=0;
#100 a=0;b=0;c=1;
#100 a=0;b=1;c=0;
#100 a=0;b=1;c=1;
#100 a=1;b=0;c=0;
#100 a=1;b=0;c=1;
#100 a=1;b=1;c=0;
#100 a=1;b=1;c=1;
end
endmodule

                Design

module peres_fa(a,b,cin,sum,carry);
output sum,carry;
input a,b,cin;
wire g1,g2,w1,w2,c;
//gate level modeling
peres t1(g1,w1,w2,a,b,1'b0);
peres t2(g2,sum,carry,w1,cin,w2);
endmodule

                  Testbench 

module peres_fa_tb();
wire sum,carry;
reg a,b,cin;
peres_fa uut(sum,carry,a,b,cin);
initial begin
a=0;b=0;cin=0;
#100 a=0;b=0;cin=1;
#100 a=0;b=1;cin=0;
#100 a=0;b=1;cin=1;
#100 a=1;b=0;cin=0;
#100 a=1;b=0;cin=1;
#100 a=1;b=1;cin=0;
#100 a=1;b=1;cin=1;
end
endmodule
 
                    Design 

module bit_16_fa(a,b,cin,sum,co);
input [15:0]a;
input [15:0]b;
input cin;
output [15:0]sum;
output co;
wire [15:0] carry;
wire [15:0]g1,g2,w1,w2,c;
//wire [15:0] sum;
//gate level modeling
peres_fa m0(a[0],b[0],cin,sum[0],carry[0]);
peres_fa m1(a[1],b[1],carry[0],sum[1],carry[1]);
peres_fa m2(a[2],b[2],carry[1],sum[2],carry[2]);
peres_fa m3(a[3],b[3],carry[2],sum[3],carry[3]);
peres_fa m4(a[4],b[4],carry[3],sum[4],carry[4]);
peres_fa m5(a[5],b[5],carry[4],sum[5],carry[5]);
peres_fa m6(a[6],b[6],carry[5],sum[6],carry[6]);
peres_fa m7(a[7],b[7],carry[6],sum[7],carry[7]);
peres_fa m8(a[8],b[8],carry[7],sum[8],carry[8]);
peres_fa m9(a[9],b[9],carry[8],sum[9],carry[9]);
peres_fa m10(a[10],b[10],carry[9],sum[10],carry[10]);
peres_fa m11(a[11],b[11],carry[10],sum[11],carry[11]);
peres_fa m12(a[12],b[12],carry[11],sum[12],carry[12]);
peres_fa m13(a[13],b[13],carry[12],sum[13],carry[13]);
peres_fa m14(a[14],b[14],carry[13],sum[14],carry[14]);
peres_fa m15(a[15],b[15],carry[14],sum[15],co);
endmodule

                  Testbench 

module bit_16_fa_tb();
wire [15:0]sum;
wire co;
reg [15:0]a;
reg [15:0]b;
reg cin;
bit_16_fa uut(a,b,cin,sum,co);
initial begin
a=16'd70;
b=16'd80;
cin=0;
#100 a=16'd90;
b=16'd60;
#100 a=16'd75;
b=16'd84;
#100 a=16'hff25;
b=16'hfe85;
end
endmodule

 ***By instantiating 16-bit NOT gates, we can design a subtractor circuit

                   Design 

module not16(
    output [15:0] y,
    input [15:0] i
    );
    not g0(y[0],i[0]);
    not g1(y[1],i[1]);
    not g2(y[2],i[2]);
    not g3(y[3],i[3]);
    not g4(y[4],i[4]);
    not g5(y[5],i[5]);
    not g6(y[6],i[6]);
    not g7(y[7],i[7]);
    not g8(y[8],i[8]);
    not g9(y[9],i[9]);
    not g10(y[10],i[10]);
    not g11(y[11],i[11]);
    not g12(y[12],i[12]);
    not g13(y[13],i[13]);
    not g14(y[14],i[14]);
    not g15(y[15],i[15]);
    
endmodule

16_bit_subtractor
                   Design 

module sub_16(
    input [15:0] a,b,
    output [15:0] sub,
    output borrow
    );
    wire [15:0]w1,w2;
    not16 g(w1[15:0],b[15:0]);
    assign w2=w1+1'b1;
    bit_16_fa m1(a,w2,1'b0,sub,borrow);
endmodule

                   Testbench 

module sub_16(
    input [15:0] a,b,
    output [15:0] sub,
    output borrow
    );
    wire [15:0]w1,w2;
    not16 g(w1[15:0],b[15:0]);
    assign w2=w1+1'b1;
    bit_16_fa m1(a,w2,1'b0,sub,borrow);
endmodule